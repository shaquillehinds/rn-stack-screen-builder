var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import inquirer from "inquirer";
import { typeAliasOptsToStr } from "./new.utilities.js";
const type = () => __awaiter(void 0, void 0, void 0, function* () {
    return (yield inquirer.prompt({
        name: "newType",
        type: "list",
        message: "What would you like to create?",
        choices: ["stage", "finder"],
    })).newType;
});
const name = () => __awaiter(void 0, void 0, void 0, function* () {
    return (yield inquirer.prompt({
        name: "name",
        type: "input",
        message: "Name of you finder or stage",
    })).name;
});
const collection = () => __awaiter(void 0, void 0, void 0, function* () {
    return (yield inquirer.prompt({
        name: "col",
        type: "input",
        message: "Name of collection you will be using?",
    })).col;
});
const finder = () => __awaiter(void 0, void 0, void 0, function* () {
    return (yield inquirer.prompt({
        name: "finder",
        type: "input",
        message: "Name of finder this stage will be using?",
    })).finder;
});
const options = (name) => __awaiter(void 0, void 0, void 0, function* () {
    let newOption = "Yes";
    const options = [];
    while (newOption === "Yes") {
        newOption = (yield inquirer.prompt({
            name: "choice",
            choices: ["Yes", "No"],
            type: "list",
            message: `Add a ${name} option`,
        })).choice;
        if (newOption === "Yes") {
            const key = (yield inquirer.prompt({
                name: "key",
                type: "input",
                message: "Key name for this option?",
            })).key;
            const valueType = (yield inquirer.prompt({
                name: "valueType",
                type: "input",
                message: "Value type for this option?",
            })).valueType;
            if (!key || !valueType)
                continue;
            options.push([key, valueType]);
        }
    }
    return typeAliasOptsToStr(options);
});
const newCommandPrompts = { type, name, collection, finder, options };
export default newCommandPrompts;
