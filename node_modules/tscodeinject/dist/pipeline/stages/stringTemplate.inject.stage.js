import importFinder from "../finders/import.finder.js";
import { DebugLogger } from "../../utils/Logger.js";
const log = DebugLogger("stringTemplate.inject.stage.ts");
/**
 *
 * @param options.stringTemplate - Provide typescipt code in a template string
 * @example
 * ```
 * (`
 * function hello(){
 *    return "world";
 *  }
 * `)
 * ```
 */
export default function injectStringTemplateStage(jcs, workingSource, { template, position, col }) {
    if (!col) {
        log("error", "No expression collection passed to this stage.");
        return workingSource;
    }
    const templateNodes = jcs.withParser("tsx")(template).find(jcs.Program).get()
        .value.body;
    const astNodes = col.get().value.body;
    let newProgram;
    switch (position) {
        case "afterImport": {
            const col = importFinder(jcs, workingSource);
            const size = col.size();
            if (size < 1)
                newProgram = jcs.program([...templateNodes, ...astNodes]);
            else {
                col.insertAfter((imp, i) => i === size - 1 ? templateNodes : undefined);
            }
            break;
        }
        case "beforeImport": {
            const col = importFinder(jcs, workingSource);
            const size = col.size();
            if (size < 1)
                newProgram = jcs.program([...templateNodes, ...astNodes]);
            else {
                col.insertBefore((imp, i) => i === 0 ? templateNodes : undefined);
            }
            break;
        }
        case "firstLine":
            newProgram = jcs.program([...templateNodes, ...astNodes]);
            break;
        default:
            newProgram = jcs.program([...astNodes, ...templateNodes]);
            break;
    }
    if (newProgram)
        col.replaceWith(newProgram);
    return workingSource;
}
