import j, { Collection } from "jscodeshift";
import { Options } from "prettier";
import { Stage, StageFinder, StageLogType, StageOptions, StageType } from "../@types/stage.js";
import { FinderOptions, FinderType } from "../@types/finder.js";
import { FileFromTemplateOptions } from "../@types/index.js";
declare class InjectionPipeline {
    protected fileLocation: string;
    prettierOptions?: Options | undefined;
    protected ast?: Collection;
    protected asts: {
        location: string;
        ast: Collection;
    }[];
    protected newFiles: {
        location: string;
        content: string;
    }[];
    protected newDirPaths: string[];
    protected updated: string[];
    protected created: string[];
    protected newDirLogs: string[];
    constructor(fileLocation: string, prettierOptions?: Options | undefined);
    get _ast(): j.Collection | undefined;
    parse(fileLocation?: string): this;
    stage<T extends StageType, F extends FinderType = FinderType>({ finder, stage, options }: {
        stage: Stage<T>;
        options: StageOptions<T> & {
            col?: Collection;
        };
        finder: StageFinder<F>;
    }): this;
    finish(filesToOpen?: string[]): Promise<this>;
    protected addLog(log: string, type?: StageLogType): void;
    injectDirectory(path: string): this;
    injectFileFromTemplate(options: FileFromTemplateOptions): this;
    injectArrayElement(stageOptions: StageOptions<"arrayElement">, finderOpts: FinderOptions<"variableArray">): this;
    injectTSEnumMember(stageOptions: StageOptions<"tsEnumMember">, finderOpts: FinderOptions<"tsEnum">): this;
    injectTSTypeAliasConditional(stageOptions: StageOptions<"tsTypeAliasConditional">, finderOpts: FinderOptions<"tsTypeAlias">): this;
    injectProperty(stageOptions: StageOptions<"property">, finderOpts: FinderOptions<"variableObject">): this;
    injectSwitchCase(stageOptions: StageOptions<"case">, finderOpts: FinderOptions<"switch">): this;
    injectTSTypeAlias(stageOptions: StageOptions<"tsTypeAlias">, finderOpts: FinderOptions<"tsTypeAlias">): this;
    injectTSTypeLiteral(stageOptions: StageOptions<"tsTypeLiteral">, finderOpts: FinderOptions<"tsTypeLiteral">): this;
    injectClassMember(stageOptions: StageOptions<"classMember">, finderOpts: FinderOptions<"classBody">): this;
    injectTSInterfaceBody(stageOptions: StageOptions<"tsInterfaceBody">, finderOpts: FinderOptions<"tsInterfaceBody">): this;
    injectJSXElement(stageOptions: StageOptions<"jsxElement">, finderOpts: FinderOptions<"jsxElement">): this;
    injectNamedExportProperty(stageOptions: StageOptions<"namedExportProperty">): this;
    injectImport(stageOptions: StageOptions<"import">): this;
    injectStringTemplate(stageOptions: StageOptions<"stringTemplate">): this;
}
export default InjectionPipeline;
